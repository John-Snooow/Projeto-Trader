instrument {
    name = 'AM_IQ  LIMPO',
    short_name = ' LIMPO',
    overlay = true
}

MaFast_period = input(1,"Ma Fast period",input.integer,1,1000,1)
MaValue = input(5,"Ma Value", input.string_selection,inputs.titles)
MaSlow_period = input(34,"Ma Slow period",input.integer,1,1000,1)
Signal_period = input(4,"Signal period",input.integer,1,1000,1)

local titleValue = inputs[MaValue]

smaFast = sma(titleValue, MaFast_period)
smaSlow = sma(titleValue, MaSlow_period)

buffer1 = smaFast - smaSlow 
buffer2 = wma(buffer1, Signal_period)

instrument{name="BEAR SUPORT/REST",icon='https://bit.ly/3C8cIFQ',overlay=true}

local function a() local b=make_series() local c=high[2]
if not get_value(c) then return b end;
local d=high<=c and high[1]<=c and high[3]<=c and high[4]<=c;
b:set(iff(d,c,b[1])) return b end

local function e() local b=make_series() local c=low[2]
if not get_value(c) then return b end;
local d=low>=c and low[1]>=c and low[3]>=c and low[4]>=c;
b:set(iff(d,c,b[1])) return b end

input_group{"Color",color=input{default="LIME",type=input.color},width=input{default=1,type=input.line_width}}

h=a()
l=e()

hline(h,"High",color,high_width)
hline(l,"Low",color,width)
hline(highest(10)[1],"HH10",color,1)
hline(lowest(10)[1],"LL10",color,1)
hline(highest(30)[1],"HH30",color,1)
hline(lowest(30)[1],"LL30",color,1)
hline(highest(60)[1],"HH60",color,1)
hline(lowest(60)[1],"LL60",color,1)
hline(highest(100)[1],"HH100",color,1)
hline(lowest(100)[1],"LL100",color,1)
hline(highest(150)[1],"HH150",color,1)
hline(lowest(150)[1],"LL150",color,1)
hline(highest(200)[1],"HH200",color,1)
hline(lowest(200)[1],"LL200",color,1)

instrument {
    name = 'SMA-ENG LIMPO',
    short_name = 'SMA-ENG LIMPO',
    icon = 'indicators:BB',
    overlay = true
}

MaFast_period = input(3,"Ma Fast period",input.integer,1,1000,1)
MaFast_average = input(4,"Ma Fast average", input.string_selection,averages.titles)
MaFast_title = input(1,"Ma Fast title", input.string_selection,inputs.titles)
MaSlow_period = input(7,"Ma Slow period",input.integer,1,1000,1)
MaSlow_average = input(2,"Ma Slow average", input.string_selection,averages.titles)
MaSlow_title = input(1,"Ma Slow title", input.string_selection,inputs.titles)
MaTrend_period = input(100,"Ma Trend period",input.integer,1,1000,5)
MaTrend_average = input(2,"Ma Trend average", input.string_selection,averages.titles)
MaTrend_title = input(1,"Ma Trend title", input.string_selection,inputs.titles)

input_group {
    "Area Up and Down",
    colorAreaUp = input { default = "rgba(34, 139, 34, 0.3)", type = input.color },  
    colorAreaDown = input { default = "rgba(220, 20, 60, 0.3)", type = input.color },
    visibleArea = input { default = true, type = input.plot_visibility } 
}

input_group {
    "Ma Slow Line",
    colorSlow = input { default = "purple", type = input.color },
    widthSlow = input { default = 2, type = input.line_width},
    visibleSlow = input { default = true, type = input.plot_visibility }
}

local avgFast = averages[MaFast_average]
local titleFast = inputs[MaFast_title]
local avgSlow = averages[MaSlow_average]
local titleSlow = inputs[MaSlow_title]
local avgTrend = averages[MaTrend_average]
local titleTrend = inputs[MaTrend_title]

if visibleFast == true then
    plot(avgFast(titleFast,MaFast_period),"Ma Fast",colorFast,widthFast)
end

if visibleSlow == true then
    plot(avgSlow(titleSlow,MaSlow_period),"Ma Slow",colorSlow,widthSlow)
end

if visibleTrend == true then
    plot(avgTrend(titleTrend,MaTrend_period),"Ma Trend",colorTrend,widthTrend)
end

candle_time = {"1s", "5s", "10s", "15s", "30s", "1m", "2m", "5m", "10m", "15m", "30m", "1H", "2H", "4H", "8H", "12H", "1D", "1W", "1M", "1Y"}
candle_time_res = input(6,"Candle check resolution",input.string_selection,candle_time)

sec = security (current_ticker_id, candle_time[candle_time_res])

if (sec ~= nil) and (sec.open_time == open_time) then
    
    Mafast0 = avgFast(titleFast,MaFast_period)
    Mafast1 = Mafast0[1]
    MaSlow0 = avgSlow(titleSlow,MaSlow_period)
    MaSlow1 = MaSlow0[1]
    MaTrend0 = avgTrend(titleTrend,MaTrend_period)
    Matrend1 = MaTrend0[1]

    -- OBS: Todos os plot_shape removidos
end

if (visibleArea == true) then
    fill(MaFast0,MaSlow0,"Area", MaFast0 > MaSlow0 and colorAreaUp or MaFast0 < MaSlow0 and colorAreaDown )
end
